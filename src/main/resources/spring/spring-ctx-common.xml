<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

    <!-- 配置数据源 -->
    <!--<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" >
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>
        <property name="url" value="jdbc:mysql://localhost:3306/zkxn?characterEncoding=utf-8"></property>
        <property name="username" value="root"></property>
        <property name="password" value="root"></property>
    </bean>-->
    <!--扫描配置文件(这里指向的是之前配置的那个config.properties)-->
    <context:property-placeholder location="classpath:config.properties"/>

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 用户名-->
        <property name="driverClass" value="${jdbc.driverClassName}"/>  <!--数据库连接驱动-->
        <property name="jdbcUrl" value="${jdbc.url}"/>     <!--数据库地址-->
        <property name="user" value="${jdbc.username}"/>   <!--用户名-->
        <property name="password" value="${jdbc.password}"/>   <!--密码-->

        <!--连接池中保留的最大连接数。默认值: 15 -->
        <property name="maxPoolSize" value="20"/>
        <!-- 连接池中保留的最小连接数，默认为：3-->
        <property name="minPoolSize" value="2"/>
        <!-- 初始化连接池中的连接数，取值应在minPoolSize与maxPoolSize之间，默认为3-->
        <property name="initialPoolSize" value="2"/>


        <!-- 当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间
        ，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 0 -->
        <property name="checkoutTimeout" value="3000"/>

        <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 -->
        <property name="acquireIncrement" value="3"/>

        <!-- 定义在从数据库获取新连接失败后重复尝试的次数。默认值: 30 ；小于等于0表示无限次-->
        <property name="acquireRetryAttempts" value="10"/>

        <!--重新尝试的时间间隔，默认为：1000毫秒-->
        <property name="acquireRetryDelay" value="1000"/>

        <!--关闭连接时，是否提交未提交的事务，默认为false，即关闭连接，回滚未提交的事务 -->
       <property name="autoCommitOnClose" value="false"></property>
    
    
    
        <!-- 如果为false，则获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常，但是数据源仍有效保留，
        并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，
        那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认: false-->
       <property name="breakAfterAcquireFailure" value="false"></property>
    
        <!--每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 -->
        <property name="idleConnectionTestPeriod" value="60"></property>
        <!-- c3p0全局的PreparedStatements缓存的大小。如果maxStatements与maxStatementsPerConnection均为0，
        则缓存不生效，只要有一个不为0，则语句的缓存就能生效。如果默认值: 0-->
        <property name="maxStatements" value="100"></property>
        <!-- maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。默认值: 0 -->
        <property name="maxStatementsPerConnection" value="100"></property>
    </bean>

    <!-- 配置SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                     <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
<!--                <prop key="hibernate.connection.url">jdbc:sqlserver://192.168.1.84:1433;databaseName=db_member</prop>-->
<!--                <prop key="hibernate.connection.driver_class">com.microsoft.sqlserver.jdbc.SQLServerDriver</prop>-->
            </props>
        </property>
        <property name="packagesToScan">
            <list>
                <!-- 扫描指定包下注解的类，可添加多个 -->
                <value>com.senontech.entity</value>
            </list>
        </property>
    </bean>

    <!-- 只扫描controller-->

    <context:component-scan base-package="com.senontech.*" >
        <context:exclude-filter expression="org.springframework.stereotype.Controller" type="annotation"/>
    </context:component-scan>

    <!-- 配置一个事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <!-- 定义事务 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="start" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="finish" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="add" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="mod" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="del" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="query" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="*Query" read-only="true"/>
            <tx:method name="*Check" read-only="true"/>
            <tx:method name="*Add" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="*Mod" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="*Delete" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="*" propagation="REQUIRED" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>
    <!-- 定义切面 -->
    <aop:config>
        <aop:pointcut id="txPointcut" expression="execution(* com.senontech.service..*.*(..))"/>
        <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
    </aop:config>


    <!-- 以下方式为通过bean的形式对单个进行事务代理配置 -->
    <!-- 配置事务，使用代理的方式 -->
    <!--<bean id="transactionProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" abstract="true">-->
    <!--<property name="transactionManager" ref="transactionManager"></property>-->
    <!--<property name="transactionAttributes">-->
    <!--<props>-->
    <!--<prop key="*Add">PROPAGATION_REQUIRED,-Exception</prop>-->
    <!--<prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>-->
    <!--<prop key="*Mod">PROPAGATION_REQUIRED,-Exception</prop>-->
    <!--<prop key="modify*">PROPAGATION_REQUIRED,-myException</prop>-->
    <!--<prop key="mod*">PROPAGATION_REQUIRED,-myException</prop>-->
    <!--<prop key="del*">PROPAGATION_REQUIRED</prop>-->
    <!--<prop key="*">PROPAGATION_REQUIRED</prop>-->
    <!--</props>-->
    <!--</property>-->
    <!--</bean>-->
    <!-- 此处为代理 -->
    <!--<bean name="modDataPerService" parent="transactionProxy">-->
    <!--<property name="target" ref="modDataPerServiceTarget"></property>-->
    <!--</bean>-->
</beans>
